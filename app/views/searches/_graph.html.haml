:css
  .link {
      fill: none;
      stroke: #D0D0D0;
      stroke-width: 1px;
  }

  #licensing {
      fill: red;
  }

  .link.licensing {
      stroke: red;
  }

  .link.resolved {
      stroke-dasharray: 0,2 1;
      stroke: orange;
  }

  circle {
      fill: mediumseagreen;
      stroke: #fff;
      stroke-width: 1px;
  }

  text {
      fill: #666;
      font: 14px sans-serif;
      cursor: pointer;
      pointer-events: all;
  }
%script{:src => "http://d3js.org/d3.v3.min.js"}
:javascript
  var test = [#{raw @test}]
  console.log(test)
  var links =[#{raw @resulting_string}];
  console.log(links)
  var nodes = {};

  links.forEach(function(link) {
      link.source = nodes[link.source.name] || (nodes[link.source.name] = {name: link.source.name, entity_id: link.source.entity_id});
      link.target = nodes[link.target.name] || (nodes[link.target.name] = {name: link.target.name, entity_id: link.target.entity_id});

  });

  var width = 2800,
          height = 2650;

  var force = d3.layout.force()
          .nodes(d3.values(nodes))
          .links(links)
          .size([width, height])
          .linkDistance(60)
          .charge(-500)
          .on("tick", tick)
          .start();
  //console.log(d3.values(nodes));

  var svg = d3.select("body")
          .append("svg")
          .attr("width", width)
          .attr("height", height);
          //.attr("style", "overflow:auto;");

  // Per-type markers, as they don't inherit styles.
  svg.append("defs").selectAll("marker")
          .data(["suit", "licensing", "resolved"])
          .enter().append("marker")
          .attr("id", function(d) { return d; })
          .attr("viewBox", "0 -5 10 10")
          .attr("refX", 32)
          .attr("refY", -3)
          .attr("markerWidth", 6)
          .attr("markerHeight", 6)
          .attr("orient", "auto")
          .append("path")
          .attr("d", "M0,-5L10,0L0,5");

  var path = svg.append("g").selectAll("path")
          .data(force.links())
          .enter().append("path")
          .attr("class", function(d) { return "link " + d.type; })
          .attr("marker-end", function(d) { return "url(#" + d.type + ")"; });

  var circle = svg.append("g").selectAll("circle")
          .data(force.nodes())
          .enter().append("circle")
          .attr("r", 15)
          .on("mouseover", function(){d3.select(this).style("fill", "orange");})
          .on("mouseout", function(){d3.select(this).style("fill", "mediumseagreen");})
          .call(force.drag);

  var text = svg.append("g").selectAll("text")
          .data(force.nodes())
          .enter().append("text")
          .attr("x", 30)
          .attr("y", ".55em")
          .text(function(d) { return  decodeURI(d.name); });

  // Use elliptical arc path segments to doubly-encode directionality.
  function tick() {
      path.attr("d", linkArc);
      circle.attr("transform", transform);
      text.attr("transform", transform);
  }

  function linkArc(d) {
      var dx = d.target.x - d.source.x,
              dy = d.target.y - d.source.y,
              dr = Math.sqrt(dx * dx + dy * dy);
      return "M" + d.source.x + "," + d.source.y + "A" + dr + "," + dr + " 0 0,1 " + d.target.x + "," + d.target.y;
  }

  function transform(d) {
      return "translate(" + d.x + "," + d.y + ")";
  }
  
  $('circle').tooltipster({
    contentAsHTML: true,
    trigger: 'click',
    content: 'Завантаження...',
    functionBefore: function(origin, continueTooltip) {
      // we'll make this function asynchronous and allow the tooltip to go ahead and show the loading notification while fetching our data
      continueTooltip();
      // next, we want to check if our data has already been cached
      if (origin.data('ajax') !== 'cached') {
        var id = $(this).context.__data__.entity_id;
        $.ajax({
          type: 'get',
          url: '/searches/' + id + '/load_info',
          success: function(data) {
            if (data.description.length == 0) {
              var info = "<span><p> Ім'я: <a href='" + data.link + "' target='_blank'>" + data.name + '</a></p><span>'
            } else {
              var info = "<span><p> Ім'я: <a href='" + data.link + "' target='_blank'>" + data.name + '</a></p><p>Опис:' + data.description + '</p><span>'
            }
            origin.tooltipster('content', info).data('ajax', 'cached');
          }
        });
      }
    }
  });
